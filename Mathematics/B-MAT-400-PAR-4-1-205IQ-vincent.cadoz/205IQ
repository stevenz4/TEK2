#!/usr/bin/python3
from math import *
import sys
import time

def check_if_number(input):
    try:
        value = int(input)
    except ValueError:
        try:
            value = float(input)
        except ValueError:
            exit(84)

def gaussian_distribution(u, s):
    x = 0.00
    p = 0.00
    while (x <= 200):
        p = density_function(u, s, x)
        print("%d %0.5f" %(x, p))
        x += 1

def inferior_iq(u, s, iq):
    x = 0.00
    p = 0.00
    while (x < iq):
        p += density_function(u, s, x)
        x += 0.01
    print("%0.1f%% of people have an IQ inferior to %0.0f" %(p, iq))

def between_iq(u, s, iq1, iq2):
    x = iq1
    p = 0.00
    while (x < iq2):
        p += density_function(u, s, x)
        x += 0.01
    print("%0.1f%% of people have an IQ between %0.0f and %0.0f" %(p, iq1, iq2))

def density_function(u, s, x):
    result = (1 / (s * sqrt(2 * pi))) * exp(-1 * pow((x - u), 2) / (2 * pow((s), 2)))
    return result

def check_mu_sigma_iq(u, s, arr):
    if (u < 0 or s < 0):
        exit(84)
    if (s == 0):
        exit(84)
    if (len(arr) == 4):
        if (arr[2] > arr[3]):
            exit(84)

def check_iq(iq):
    if (iq < 0 or iq > 200):
        exit(84)

def error_handler():
    arr = []
    if (len(sys.argv) == 2 and sys.argv[1] == "-h"):
        print("USAGE")
        print("\t./205IQ u s [IQ1] [IQ2]\n")
        print("DESCRIPTION")
        print("\tu\tmean\n\ts\tstandard deviation\n\tIQ1\tminimum IQ\n\tIQ2\tmaximum IQ\n")
        exit(0)
    if (len(sys.argv) < 3 or len(sys.argv) > 5):
        exit(84)
    for i in range(1, len(sys.argv)):
        check_if_number(sys.argv[i])
        arr.append(float(sys.argv[i]))
        if (i > 2):
            check_iq(arr[i - 1])
    check_mu_sigma_iq(arr[0], arr[1], arr)
    return arr

if __name__ == "__main__":
    input = []
    input = error_handler()
    if (len(input) == 2):
        gaussian_distribution(input[0], input[1])
    if (len(input) == 3):
        inferior_iq(input[0], input[1], input[2])
    if (len(input) == 4):
        between_iq(input[0], input[1], input[2], input[3])
    exit(0)